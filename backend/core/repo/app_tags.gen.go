// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doo-store/backend/core/model"
)

func newAppTag(db *gorm.DB, opts ...gen.DOOption) appTag {
	_appTag := appTag{}

	_appTag.appTagDo.UseDB(db, opts...)
	_appTag.appTagDo.UseModel(&model.AppTag{})

	tableName := _appTag.appTagDo.TableName()
	_appTag.ALL = field.NewAsterisk(tableName)
	_appTag.ID = field.NewInt64(tableName, "id")
	_appTag.CreatedAt = field.NewTime(tableName, "created_at")
	_appTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appTag.AppID = field.NewInt64(tableName, "app_id")
	_appTag.TagID = field.NewInt64(tableName, "tag_id")

	_appTag.fillFieldMap()

	return _appTag
}

type appTag struct {
	appTagDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	AppID     field.Int64
	TagID     field.Int64

	fieldMap map[string]field.Expr
}

func (a appTag) Table(newTableName string) *appTag {
	a.appTagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appTag) As(alias string) *appTag {
	a.appTagDo.DO = *(a.appTagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appTag) updateTableName(table string) *appTag {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.AppID = field.NewInt64(table, "app_id")
	a.TagID = field.NewInt64(table, "tag_id")

	a.fillFieldMap()

	return a
}

func (a *appTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appTag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["tag_id"] = a.TagID
}

func (a appTag) clone(db *gorm.DB) appTag {
	a.appTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appTag) replaceDB(db *gorm.DB) appTag {
	a.appTagDo.ReplaceDB(db)
	return a
}

type appTagDo struct{ gen.DO }

type IAppTagDo interface {
	gen.SubQuery
	Debug() IAppTagDo
	WithContext(ctx context.Context) IAppTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppTagDo
	WriteDB() IAppTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppTagDo
	Not(conds ...gen.Condition) IAppTagDo
	Or(conds ...gen.Condition) IAppTagDo
	Select(conds ...field.Expr) IAppTagDo
	Where(conds ...gen.Condition) IAppTagDo
	Order(conds ...field.Expr) IAppTagDo
	Distinct(cols ...field.Expr) IAppTagDo
	Omit(cols ...field.Expr) IAppTagDo
	Join(table schema.Tabler, on ...field.Expr) IAppTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppTagDo
	Group(cols ...field.Expr) IAppTagDo
	Having(conds ...gen.Condition) IAppTagDo
	Limit(limit int) IAppTagDo
	Offset(offset int) IAppTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppTagDo
	Unscoped() IAppTagDo
	Create(values ...*model.AppTag) error
	CreateInBatches(values []*model.AppTag, batchSize int) error
	Save(values ...*model.AppTag) error
	First() (*model.AppTag, error)
	Take() (*model.AppTag, error)
	Last() (*model.AppTag, error)
	Find() ([]*model.AppTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppTag, err error)
	FindInBatches(result *[]*model.AppTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppTagDo
	Assign(attrs ...field.AssignExpr) IAppTagDo
	Joins(fields ...field.RelationField) IAppTagDo
	Preload(fields ...field.RelationField) IAppTagDo
	FirstOrInit() (*model.AppTag, error)
	FirstOrCreate() (*model.AppTag, error)
	FindByPage(offset int, limit int) (result []*model.AppTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appTagDo) Debug() IAppTagDo {
	return a.withDO(a.DO.Debug())
}

func (a appTagDo) WithContext(ctx context.Context) IAppTagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appTagDo) ReadDB() IAppTagDo {
	return a.Clauses(dbresolver.Read)
}

func (a appTagDo) WriteDB() IAppTagDo {
	return a.Clauses(dbresolver.Write)
}

func (a appTagDo) Session(config *gorm.Session) IAppTagDo {
	return a.withDO(a.DO.Session(config))
}

func (a appTagDo) Clauses(conds ...clause.Expression) IAppTagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appTagDo) Returning(value interface{}, columns ...string) IAppTagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appTagDo) Not(conds ...gen.Condition) IAppTagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appTagDo) Or(conds ...gen.Condition) IAppTagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appTagDo) Select(conds ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appTagDo) Where(conds ...gen.Condition) IAppTagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appTagDo) Order(conds ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appTagDo) Distinct(cols ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appTagDo) Omit(cols ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appTagDo) Join(table schema.Tabler, on ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appTagDo) Group(cols ...field.Expr) IAppTagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appTagDo) Having(conds ...gen.Condition) IAppTagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appTagDo) Limit(limit int) IAppTagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appTagDo) Offset(offset int) IAppTagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppTagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appTagDo) Unscoped() IAppTagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appTagDo) Create(values ...*model.AppTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appTagDo) CreateInBatches(values []*model.AppTag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appTagDo) Save(values ...*model.AppTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appTagDo) First() (*model.AppTag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTag), nil
	}
}

func (a appTagDo) Take() (*model.AppTag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTag), nil
	}
}

func (a appTagDo) Last() (*model.AppTag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTag), nil
	}
}

func (a appTagDo) Find() ([]*model.AppTag, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppTag), err
}

func (a appTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppTag, err error) {
	buf := make([]*model.AppTag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appTagDo) FindInBatches(result *[]*model.AppTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appTagDo) Attrs(attrs ...field.AssignExpr) IAppTagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appTagDo) Assign(attrs ...field.AssignExpr) IAppTagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appTagDo) Joins(fields ...field.RelationField) IAppTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appTagDo) Preload(fields ...field.RelationField) IAppTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appTagDo) FirstOrInit() (*model.AppTag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTag), nil
	}
}

func (a appTagDo) FirstOrCreate() (*model.AppTag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTag), nil
	}
}

func (a appTagDo) FindByPage(offset int, limit int) (result []*model.AppTag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appTagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appTagDo) Delete(models ...*model.AppTag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appTagDo) withDO(do gen.Dao) *appTagDo {
	a.DO = *do.(*gen.DO)
	return a
}
