// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"doo-store/backend/core/model"
)

func newAppDetail(db *gorm.DB, opts ...gen.DOOption) appDetail {
	_appDetail := appDetail{}

	_appDetail.appDetailDo.UseDB(db, opts...)
	_appDetail.appDetailDo.UseModel(&model.AppDetail{})

	tableName := _appDetail.appDetailDo.TableName()
	_appDetail.ALL = field.NewAsterisk(tableName)
	_appDetail.ID = field.NewInt64(tableName, "id")
	_appDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_appDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appDetail.AppID = field.NewInt64(tableName, "app_id")
	_appDetail.Repo = field.NewString(tableName, "repo")
	_appDetail.Version = field.NewString(tableName, "version")
	_appDetail.DependsVersion = field.NewString(tableName, "depends_version")
	_appDetail.Params = field.NewString(tableName, "params")
	_appDetail.DockerCompose = field.NewString(tableName, "docker_compose")
	_appDetail.Status = field.NewString(tableName, "status")

	_appDetail.fillFieldMap()

	return _appDetail
}

type appDetail struct {
	appDetailDo

	ALL            field.Asterisk
	ID             field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	AppID          field.Int64
	Repo           field.String
	Version        field.String
	DependsVersion field.String
	Params         field.String
	DockerCompose  field.String
	Status         field.String

	fieldMap map[string]field.Expr
}

func (a appDetail) Table(newTableName string) *appDetail {
	a.appDetailDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appDetail) As(alias string) *appDetail {
	a.appDetailDo.DO = *(a.appDetailDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appDetail) updateTableName(table string) *appDetail {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.AppID = field.NewInt64(table, "app_id")
	a.Repo = field.NewString(table, "repo")
	a.Version = field.NewString(table, "version")
	a.DependsVersion = field.NewString(table, "depends_version")
	a.Params = field.NewString(table, "params")
	a.DockerCompose = field.NewString(table, "docker_compose")
	a.Status = field.NewString(table, "status")

	a.fillFieldMap()

	return a
}

func (a *appDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appDetail) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["repo"] = a.Repo
	a.fieldMap["version"] = a.Version
	a.fieldMap["depends_version"] = a.DependsVersion
	a.fieldMap["params"] = a.Params
	a.fieldMap["docker_compose"] = a.DockerCompose
	a.fieldMap["status"] = a.Status
}

func (a appDetail) clone(db *gorm.DB) appDetail {
	a.appDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appDetail) replaceDB(db *gorm.DB) appDetail {
	a.appDetailDo.ReplaceDB(db)
	return a
}

type appDetailDo struct{ gen.DO }

type IAppDetailDo interface {
	gen.SubQuery
	Debug() IAppDetailDo
	WithContext(ctx context.Context) IAppDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppDetailDo
	WriteDB() IAppDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppDetailDo
	Not(conds ...gen.Condition) IAppDetailDo
	Or(conds ...gen.Condition) IAppDetailDo
	Select(conds ...field.Expr) IAppDetailDo
	Where(conds ...gen.Condition) IAppDetailDo
	Order(conds ...field.Expr) IAppDetailDo
	Distinct(cols ...field.Expr) IAppDetailDo
	Omit(cols ...field.Expr) IAppDetailDo
	Join(table schema.Tabler, on ...field.Expr) IAppDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppDetailDo
	Group(cols ...field.Expr) IAppDetailDo
	Having(conds ...gen.Condition) IAppDetailDo
	Limit(limit int) IAppDetailDo
	Offset(offset int) IAppDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppDetailDo
	Unscoped() IAppDetailDo
	Create(values ...*model.AppDetail) error
	CreateInBatches(values []*model.AppDetail, batchSize int) error
	Save(values ...*model.AppDetail) error
	First() (*model.AppDetail, error)
	Take() (*model.AppDetail, error)
	Last() (*model.AppDetail, error)
	Find() ([]*model.AppDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppDetail, err error)
	FindInBatches(result *[]*model.AppDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppDetailDo
	Assign(attrs ...field.AssignExpr) IAppDetailDo
	Joins(fields ...field.RelationField) IAppDetailDo
	Preload(fields ...field.RelationField) IAppDetailDo
	FirstOrInit() (*model.AppDetail, error)
	FirstOrCreate() (*model.AppDetail, error)
	FindByPage(offset int, limit int) (result []*model.AppDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appDetailDo) Debug() IAppDetailDo {
	return a.withDO(a.DO.Debug())
}

func (a appDetailDo) WithContext(ctx context.Context) IAppDetailDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appDetailDo) ReadDB() IAppDetailDo {
	return a.Clauses(dbresolver.Read)
}

func (a appDetailDo) WriteDB() IAppDetailDo {
	return a.Clauses(dbresolver.Write)
}

func (a appDetailDo) Session(config *gorm.Session) IAppDetailDo {
	return a.withDO(a.DO.Session(config))
}

func (a appDetailDo) Clauses(conds ...clause.Expression) IAppDetailDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appDetailDo) Returning(value interface{}, columns ...string) IAppDetailDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appDetailDo) Not(conds ...gen.Condition) IAppDetailDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appDetailDo) Or(conds ...gen.Condition) IAppDetailDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appDetailDo) Select(conds ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appDetailDo) Where(conds ...gen.Condition) IAppDetailDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appDetailDo) Order(conds ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appDetailDo) Distinct(cols ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appDetailDo) Omit(cols ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appDetailDo) Join(table schema.Tabler, on ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appDetailDo) Group(cols ...field.Expr) IAppDetailDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appDetailDo) Having(conds ...gen.Condition) IAppDetailDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appDetailDo) Limit(limit int) IAppDetailDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appDetailDo) Offset(offset int) IAppDetailDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppDetailDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appDetailDo) Unscoped() IAppDetailDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appDetailDo) Create(values ...*model.AppDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appDetailDo) CreateInBatches(values []*model.AppDetail, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appDetailDo) Save(values ...*model.AppDetail) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appDetailDo) First() (*model.AppDetail, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDetail), nil
	}
}

func (a appDetailDo) Take() (*model.AppDetail, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDetail), nil
	}
}

func (a appDetailDo) Last() (*model.AppDetail, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDetail), nil
	}
}

func (a appDetailDo) Find() ([]*model.AppDetail, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppDetail), err
}

func (a appDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppDetail, err error) {
	buf := make([]*model.AppDetail, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appDetailDo) FindInBatches(result *[]*model.AppDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appDetailDo) Attrs(attrs ...field.AssignExpr) IAppDetailDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appDetailDo) Assign(attrs ...field.AssignExpr) IAppDetailDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appDetailDo) Joins(fields ...field.RelationField) IAppDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appDetailDo) Preload(fields ...field.RelationField) IAppDetailDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appDetailDo) FirstOrInit() (*model.AppDetail, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDetail), nil
	}
}

func (a appDetailDo) FirstOrCreate() (*model.AppDetail, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppDetail), nil
	}
}

func (a appDetailDo) FindByPage(offset int, limit int) (result []*model.AppDetail, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appDetailDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appDetailDo) Delete(models ...*model.AppDetail) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appDetailDo) withDO(do gen.Dao) *appDetailDo {
	a.DO = *do.(*gen.DO)
	return a
}
